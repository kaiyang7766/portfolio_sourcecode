{"ast":null,"code":"const PRESSED = 1;\nconst RELEASED = 0;\nexport default class KeyboardState {\n  constructor() {\n    // Holds the current state of a given key\n    this.keyStates = new Map(); // Holds the callback functions for a key code\n\n    this.keyMap = new Map();\n  }\n\n  addMapping(code, callback) {\n    this.keyMap.set(code, callback);\n  }\n\n  handleEvent(event) {\n    const {\n      code\n    } = event;\n\n    if (!this.keyMap.has(code)) {\n      // Did not have key mapped.\n      return;\n    }\n\n    event.preventDefault();\n    const keyState = event.type === 'keydown' ? PRESSED : RELEASED;\n\n    if (this.keyStates.get(code) === keyState) {\n      return;\n    }\n\n    this.keyStates.set(code, keyState); //console.log(this.keyStates);\n\n    this.keyMap.get(code)(keyState);\n  }\n\n  listenTo(window) {\n    ['keydown', 'keyup'].forEach(eventName => {\n      window.addEventListener(eventName, event => {\n        this.handleEvent(event);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ang Kai Yang/Desktop/portfolio/src/main/KeyboardState.js"],"names":["PRESSED","RELEASED","KeyboardState","constructor","keyStates","Map","keyMap","addMapping","code","callback","set","handleEvent","event","has","preventDefault","keyState","type","get","listenTo","window","forEach","eventName","addEventListener"],"mappings":"AAAA,MAAMA,OAAO,GAAE,CAAf;AACA,MAAMC,QAAQ,GAAE,CAAhB;AAEA,eAAe,MAAMC,aAAN,CAAmB;AACjCC,EAAAA,WAAW,GAAE;AACZ;AACA,SAAKC,SAAL,GAAe,IAAIC,GAAJ,EAAf,CAFY,CAIZ;;AACA,SAAKC,MAAL,GAAY,IAAID,GAAJ,EAAZ;AACA;;AAEDE,EAAAA,UAAU,CAACC,IAAD,EAAOC,QAAP,EAAgB;AACzB,SAAKH,MAAL,CAAYI,GAAZ,CAAgBF,IAAhB,EAAqBC,QAArB;AACA;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAM;AAACJ,MAAAA;AAAD,QAAOI,KAAb;;AAEA,QAAI,CAAC,KAAKN,MAAL,CAAYO,GAAZ,CAAgBL,IAAhB,CAAL,EAA2B;AAC1B;AACA;AACA;;AAEDI,IAAAA,KAAK,CAACE,cAAN;AAEA,UAAMC,QAAQ,GAACH,KAAK,CAACI,IAAN,KAAc,SAAd,GAA0BhB,OAA1B,GAAoCC,QAAnD;;AAEA,QAAI,KAAKG,SAAL,CAAea,GAAf,CAAmBT,IAAnB,MAA6BO,QAAjC,EAA0C;AACzC;AACA;;AAED,SAAKX,SAAL,CAAeM,GAAf,CAAmBF,IAAnB,EAAyBO,QAAzB,EAhBiB,CAiBjB;;AACA,SAAKT,MAAL,CAAYW,GAAZ,CAAgBT,IAAhB,EAAsBO,QAAtB;AACA;;AAEDG,EAAAA,QAAQ,CAACC,MAAD,EAAQ;AACf,KAAC,SAAD,EAAW,OAAX,EAAoBC,OAApB,CAA4BC,SAAS,IAAE;AACtCF,MAAAA,MAAM,CAACG,gBAAP,CAAwBD,SAAxB,EAAkCT,KAAK,IAAE;AACxC,aAAKD,WAAL,CAAiBC,KAAjB;AACA,OAFD;AAGA,KAJD;AAKA;;AAxCgC","sourcesContent":["const PRESSED =1;\r\nconst RELEASED =0;\r\n\r\nexport default class KeyboardState{\r\n\tconstructor(){\r\n\t\t// Holds the current state of a given key\r\n\t\tthis.keyStates=new Map();\r\n\r\n\t\t// Holds the callback functions for a key code\r\n\t\tthis.keyMap=new Map();\r\n\t}\r\n\r\n\taddMapping(code, callback){\r\n\t\tthis.keyMap.set(code,callback);\r\n\t}\r\n\r\n\thandleEvent(event){\r\n\t\tconst {code}=event;\r\n\r\n\t\tif (!this.keyMap.has(code)){\r\n\t\t\t// Did not have key mapped.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst keyState=event.type ==='keydown' ? PRESSED : RELEASED;\r\n\r\n\t\tif (this.keyStates.get(code) === keyState){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.keyStates.set(code, keyState);\r\n\t\t//console.log(this.keyStates);\r\n\t\tthis.keyMap.get(code)(keyState);\r\n\t}\r\n\r\n\tlistenTo(window){\r\n\t\t['keydown','keyup'].forEach(eventName=>{\r\n\t\t\twindow.addEventListener(eventName,event=>{\r\n\t\t\t\tthis.handleEvent(event);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}