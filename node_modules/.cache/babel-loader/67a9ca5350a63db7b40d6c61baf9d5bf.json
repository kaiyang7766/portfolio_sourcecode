{"ast":null,"code":"import TileResolver from './TileResolver.js';\nimport { Sides } from './Entity.js';\nexport default class TileCollider {\n  constructor(tileMatrix) {\n    this.tiles = new TileResolver(tileMatrix);\n  }\n\n  checkX(entity) {\n    let x;\n\n    if (entity.vel.x > 0) {\n      x = entity.pos.x + entity.size.x;\n    } else if (entity.vel.x < 0) {\n      x = entity.pos.x;\n    } else {\n      return;\n    }\n\n    const matches = this.tiles.searchByRange(entity.pos.x, entity.pos.x + entity.size.x, entity.pos.y, entity.pos.y + entity.size.y);\n    matches.forEach(match => {\n      if (match.tile.type !== 'ground') {\n        return;\n      }\n\n      if (entity.vel.x > 0) {\n        if (entity.pos.x + entity.size.x > match.x1) {\n          entity.pos.x = match.x1 - entity.size.x;\n          entity.vel.x = 0;\n        }\n      } else if (entity.vel.x < 0) {\n        if (entity.pos.x < match.x2) {\n          entity.pos.x = match.x2;\n          entity.vel.x = 0;\n        }\n      }\n    });\n  }\n\n  checkY(entity) {\n    let y;\n\n    if (entity.vel.y > 0) {\n      y = entity.pos.y + entity.size.y;\n    } else if (entity.vel.y < 0) {\n      y = entity.pos.y;\n    } else {\n      return;\n    }\n\n    const matches = this.tiles.searchByRange(entity.pos.x, entity.pos.x + entity.size.x, entity.pos.y, entity.pos.y + entity.size.y);\n    matches.forEach(match => {\n      if (match.tile.type !== 'ground') {\n        return;\n      }\n\n      if (entity.vel.y > 0) {\n        if (entity.pos.y + entity.size.y > match.y1) {\n          entity.pos.y = match.y1 - entity.size.y;\n          entity.vel.y = 0;\n          entity.obstruct(Sides.BOTTOM);\n        }\n      } else if (entity.vel.y < 0) {\n        if (entity.pos.y < match.y2) {\n          entity.pos.y = match.y2;\n          entity.vel.y = 0;\n          entity.obstruct(Sides.TOP);\n        }\n      }\n    });\n  }\n\n  test(entity) {\n    this.checkY(entity); //const match=this.tiles.matchByPosition(entity.pos.x,entity.pos.y);\n    //if (match){\n    //console.log('Matched tile',match,match.tile);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ang Kai Yang/Desktop/portfolio1/src/js/TileCollider.js"],"names":["TileResolver","Sides","TileCollider","constructor","tileMatrix","tiles","checkX","entity","x","vel","pos","size","matches","searchByRange","y","forEach","match","tile","type","x1","x2","checkY","y1","obstruct","BOTTOM","y2","TOP","test"],"mappings":"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","sourcesContent":["import TileResolver from './TileResolver.js';\r\nimport {Sides} from './Entity.js'\r\n\r\nexport default class TileCollider{\r\n\tconstructor(tileMatrix){\r\n\t\tthis.tiles=new TileResolver(tileMatrix);\r\n\t}\r\n\r\n\tcheckX(entity){\r\n\t\tlet x;\r\n\t\tif (entity.vel.x>0){\r\n\t\t\tx=entity.pos.x+entity.size.x;\r\n\t\t} else if (entity.vel.x<0){\r\n\t\t\tx=entity.pos.x;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst matches=this.tiles.searchByRange(\r\n\t\t\tentity.pos.x,entity.pos.x+entity.size.x,\r\n\t\t\tentity.pos.y,entity.pos.y+entity.size.y);\r\n\r\n\t\tmatches.forEach(match=>{\r\n\t\t\tif (match.tile.type!=='ground'){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (entity.vel.x>0){\r\n\t\t\t\tif (entity.pos.x+entity.size.x>(match.x1)){\r\n\t\t\t\t\tentity.pos.x=(match.x1-entity.size.x);\r\n\t\t\t\t\tentity.vel.x=0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (entity.vel.x<0){\r\n\t\t\t\tif (entity.pos.x<(match.x2)){\r\n\t\t\t\t\tentity.pos.x=(match.x2);\r\n\t\t\t\t\tentity.vel.x=0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcheckY(entity){\r\n\t\tlet y;\r\n\t\tif (entity.vel.y>0){\r\n\t\t\ty=entity.pos.y+entity.size.y;\r\n\t\t} else if (entity.vel.y<0){\r\n\t\t\ty=entity.pos.y\r\n\t\t\t;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst matches=this.tiles.searchByRange(\r\n\t\t\tentity.pos.x,entity.pos.x+entity.size.x,\r\n\t\t\tentity.pos.y,entity.pos.y+entity.size.y);\r\n\r\n\t\tmatches.forEach(match=>{\r\n\t\t\tif (match.tile.type!=='ground'){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (entity.vel.y>0){\r\n\t\t\t\tif (entity.pos.y+entity.size.y>(match.y1)){\r\n\t\t\t\t\tentity.pos.y=(match.y1-entity.size.y);\r\n\t\t\t\t\tentity.vel.y=0;\r\n\r\n\t\t\t\t\tentity.obstruct(Sides.BOTTOM);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (entity.vel.y<0){\r\n\t\t\t\tif (entity.pos.y<(match.y2)){\r\n\t\t\t\t\tentity.pos.y=(match.y2);\r\n\t\t\t\t\tentity.vel.y=0;\r\n\r\n\t\t\t\t\tentity.obstruct(Sides.TOP);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\ttest(entity){\r\n\t\tthis.checkY(entity);\r\n\t\t//const match=this.tiles.matchByPosition(entity.pos.x,entity.pos.y);\r\n\t\t//if (match){\r\n\t\t//console.log('Matched tile',match,match.tile);\r\n\t\t}\r\n}"]},"metadata":{},"sourceType":"module"}