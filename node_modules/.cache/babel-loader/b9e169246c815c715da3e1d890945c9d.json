{"ast":null,"code":"import _classCallCheck from\"C:/Users/Ang Kai Yang/Desktop/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Ang Kai Yang/Desktop/portfolio/node_modules/@babel/runtime/helpers/esm/createClass\";var PRESSED=1;var RELEASED=0;var KeyboardState=/*#__PURE__*/function(){function KeyboardState(){_classCallCheck(this,KeyboardState);// Holds the current state of a given key\nthis.keyStates=new Map();// Holds the callback functions for a key code\nthis.keyMap=new Map();}_createClass(KeyboardState,[{key:\"addMapping\",value:function addMapping(code,callback){this.keyMap.set(code,callback);}},{key:\"handleEvent\",value:function handleEvent(event){var code=event.code;if(!this.keyMap.has(code)){// Did not have key mapped.\nreturn;}event.preventDefault();var keyState=event.type==='keydown'?PRESSED:RELEASED;if(this.keyStates.get(code)===keyState){return;}this.keyStates.set(code,keyState);//console.log(this.keyStates);\nthis.keyMap.get(code)(keyState);}},{key:\"listenTo\",value:function listenTo(window){var _this=this;['keydown','keyup'].forEach(function(eventName){window.addEventListener(eventName,function(event){_this.handleEvent(event);});});}}]);return KeyboardState;}();export{KeyboardState as default};","map":{"version":3,"sources":["C:/Users/Ang Kai Yang/Desktop/portfolio/src/js/KeyboardState.js"],"names":["PRESSED","RELEASED","KeyboardState","keyStates","Map","keyMap","code","callback","set","event","has","preventDefault","keyState","type","get","window","forEach","eventName","addEventListener","handleEvent"],"mappings":"kPAAA,GAAMA,CAAAA,OAAO,CAAE,CAAf,CACA,GAAMC,CAAAA,QAAQ,CAAE,CAAhB,C,GAEqBC,CAAAA,a,yBACpB,wBAAa,qCACZ;AACA,KAAKC,SAAL,CAAe,GAAIC,CAAAA,GAAJ,EAAf,CAEA;AACA,KAAKC,MAAL,CAAY,GAAID,CAAAA,GAAJ,EAAZ,CACA,C,oDAED,oBAAWE,IAAX,CAAiBC,QAAjB,CAA0B,CACzB,KAAKF,MAAL,CAAYG,GAAZ,CAAgBF,IAAhB,CAAqBC,QAArB,EACA,C,2BAED,qBAAYE,KAAZ,CAAkB,CACjB,GAAOH,CAAAA,IAAP,CAAaG,KAAb,CAAOH,IAAP,CAEA,GAAI,CAAC,KAAKD,MAAL,CAAYK,GAAZ,CAAgBJ,IAAhB,CAAL,CAA2B,CAC1B;AACA,OACA,CAEDG,KAAK,CAACE,cAAN,GAEA,GAAMC,CAAAA,QAAQ,CAACH,KAAK,CAACI,IAAN,GAAc,SAAd,CAA0Bb,OAA1B,CAAoCC,QAAnD,CAEA,GAAI,KAAKE,SAAL,CAAeW,GAAf,CAAmBR,IAAnB,IAA6BM,QAAjC,CAA0C,CACzC,OACA,CAED,KAAKT,SAAL,CAAeK,GAAf,CAAmBF,IAAnB,CAAyBM,QAAzB,EACA;AACA,KAAKP,MAAL,CAAYS,GAAZ,CAAgBR,IAAhB,EAAsBM,QAAtB,EACA,C,wBAED,kBAASG,MAAT,CAAgB,gBACf,CAAC,SAAD,CAAW,OAAX,EAAoBC,OAApB,CAA4B,SAAAC,SAAS,CAAE,CACtCF,MAAM,CAACG,gBAAP,CAAwBD,SAAxB,CAAkC,SAAAR,KAAK,CAAE,CACxC,KAAI,CAACU,WAAL,CAAiBV,KAAjB,EACA,CAFD,EAGA,CAJD,EAKA,C,oCAxCmBP,a","sourcesContent":["const PRESSED =1;\r\nconst RELEASED =0;\r\n\r\nexport default class KeyboardState{\r\n\tconstructor(){\r\n\t\t// Holds the current state of a given key\r\n\t\tthis.keyStates=new Map();\r\n\r\n\t\t// Holds the callback functions for a key code\r\n\t\tthis.keyMap=new Map();\r\n\t}\r\n\r\n\taddMapping(code, callback){\r\n\t\tthis.keyMap.set(code,callback);\r\n\t}\r\n\r\n\thandleEvent(event){\r\n\t\tconst {code}=event;\r\n\r\n\t\tif (!this.keyMap.has(code)){\r\n\t\t\t// Did not have key mapped.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst keyState=event.type ==='keydown' ? PRESSED : RELEASED;\r\n\r\n\t\tif (this.keyStates.get(code) === keyState){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.keyStates.set(code, keyState);\r\n\t\t//console.log(this.keyStates);\r\n\t\tthis.keyMap.get(code)(keyState);\r\n\t}\r\n\r\n\tlistenTo(window){\r\n\t\t['keydown','keyup'].forEach(eventName=>{\r\n\t\t\twindow.addEventListener(eventName,event=>{\r\n\t\t\t\tthis.handleEvent(event);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}